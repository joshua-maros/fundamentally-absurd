#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, r16ui) uniform uimage2D world_target;
layout(set = 0, binding = 1, rgba8_snorm) uniform writeonly image2D final_image;

layout(push_constant) uniform PushData {
    ivec2 offset;
    uint zoom;
} push_data;

const uint WORLD_SIZE = 1024;

uint sampl(int x, int y) {
    return imageLoad(world_target, ivec2(
        (x + WORLD_SIZE) % WORLD_SIZE,
        (y + WORLD_SIZE) % WORLD_SIZE
    )).r;
}

float hue_part(float a) {
    a *= 3.0;
    a = mod(a + 3.0, 3.0);
    if (a < 1.0) {
        return a;
    } else if (a > 2.0) {
        return 3.0 - a;
    } else {
        return 1.0;
    }
}

vec3 hue(float hue_value) {
    return vec3(
        hue_part(hue_value + 0.66),
        hue_part(hue_value + 0.33),
        hue_part(hue_value)
    );
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 world_pos = (pos / ivec2(push_data.zoom) + push_data.offset) % ivec2(WORLD_SIZE);

    vec3 color = vec3(0.0);
    uint value = imageLoad(world_target, world_pos).r;
    if (value == 0) {
        color = vec3(0.0);
    } else if (value == 1) {
        color = vec3(1.0);
    } else {
        value -= 2;
        // uint shade = value % 3;
        // value = value / 3;
        uint shade = 2;
        if (value == 0) {
            color = hue(0.0);
        } else if (value == 1) {
            color = hue(0.5);
        } else if (value < 4) {
            value -= 2;
            color = hue((value + 0.5) / 2.0);
        } else if (value < 8) {
            value -= 4;
            color = hue((value + 0.5) / 4.0);
        } else if (value < 16) {
            value -= 8;
            color = hue((value + 0.5) / 8.0);
        } else if (value < 32) {
            value -= 16;
            color = hue((value + 0.5) / 16.0);
        } else if (value < 64) {
            value -= 32;
            color = hue((value + 0.5) / 32.0);
        } else if (value < 128) {
            value -= 64;
            color = hue((value + 0.5) / 64.0);
        } else if (value < 256) {
            value -= 128;
            color = hue((value + 0.5) / 128.0);
        }
        if (shade == 0) {
            color *= 0.5;
        } else if (shade == 1) {
            color *= 0.75;
        }
    }

    imageStore(final_image, pos, vec4(color, 1.0));
}